from flask import Flask, request, jsonify
import os
import openai
import psycopg2
from datetime import datetime
from twilio.twiml.messaging_response import MessagingResponse

app = Flask(__name__)

# Connexion base de donn√©es
DATABASE_URL = os.environ.get("DATABASE_URL")
conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cur = conn.cursor()

# Cl√© OpenAI
openai.api_key = os.environ.get("OPENAI_API_KEY")

# Menu automatique
@app.route("/", methods=["GET"])
def home():
    return "Askely Express est en ligne."

@app.route("/webhook/whatsapp", methods=["POST"])
def whatsapp_webhook():
    incoming_msg = request.values.get("Body", "").strip().lower()
    sender = request.values.get("From", "")
    response = MessagingResponse()
    msg = response.message()

    if incoming_msg in ["bonjour", "salut", "hello", "menu"]:
        msg.body("""
üëã Bienvenue chez *Askely Express* !

Voici ce que je peux faire pour vous :

1Ô∏è‚É£ Envoyer un colis  
2Ô∏è‚É£ Inscrire un transporteur  
3Ô∏è‚É£ Aide intelligente (IA)

R√©pondez par le num√©ro correspondant pour commencer.
""")
    elif incoming_msg == "1":
        msg.body("üì¶ Tr√®s bien. Pour envoyer un colis, merci d‚Äôenvoyer les informations suivantes :

Nom complet, Ville de d√©part, Ville d‚Äôarriv√©e, Poids approximatif (kg), Date d‚Äôenvoi souhait√©e.")
    elif incoming_msg.startswith("üì¶") or "," in incoming_msg:
        try:
            parts = incoming_msg.split(",")
            if len(parts) >= 5:
                nom, depart, arrivee, poids, date_envoi = [p.strip() for p in parts[:5]]
                cur.execute("INSERT INTO colis (nom, ville_depart, ville_arrivee, poids, date_envoi, created_at) VALUES (%s, %s, %s, %s, %s, %s)", 
                            (nom, depart, arrivee, poids, date_envoi, datetime.utcnow()))
                conn.commit()
                msg.body("‚úÖ Votre demande d‚Äôenvoi a √©t√© enregistr√©e avec succ√®s ! Un transporteur vous contactera bient√¥t.")
            else:
                msg.body("‚ùå Format invalide. Veuillez envoyer : Nom, Ville d√©part, Ville arriv√©e, Poids, Date.")
        except Exception as e:
            msg.body("‚ùå Erreur lors de l‚Äôenregistrement. Merci de r√©essayer.")
    elif incoming_msg == "2":
        msg.body("üöö Pour inscrire un transporteur, merci d‚Äôenvoyer :

Nom complet, T√©l√©phone, Ville, Jours de disponibilit√©.")
    elif incoming_msg.startswith("üöö") or "," in incoming_msg:
        try:
            parts = incoming_msg.split(",")
            if len(parts) >= 4:
                nom, tel, ville, jours = [p.strip() for p in parts[:4]]
                cur.execute("INSERT INTO transporteurs (nom, telephone, ville, jours_dispo, created_at) VALUES (%s, %s, %s, %s, %s)", 
                            (nom, tel, ville, jours, datetime.utcnow()))
                conn.commit()
                msg.body("‚úÖ Inscription enregistr√©e. Bienvenue parmi les transporteurs Askely Express !")
            else:
                msg.body("‚ùå Format invalide. Veuillez envoyer : Nom, T√©l√©phone, Ville, Jours.")
        except Exception as e:
            msg.body("‚ùå Une erreur s‚Äôest produite. Merci de r√©essayer.")
    elif incoming_msg == "3":
        msg.body("‚úçÔ∏è Posez votre question, je vais vous r√©pondre avec l‚ÄôIA.")
    else:
        try:
            completion = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": incoming_msg}]
            )
            msg.body(completion.choices[0].message.content)
        except Exception as e:
            msg.body("ü§ñ Erreur avec l‚Äôintelligence artificielle. Veuillez reformuler ou r√©essayer plus tard.")

    return str(response)

if __name__ == "__main__":
    app.run(debug=True)